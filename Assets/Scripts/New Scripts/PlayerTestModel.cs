using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerTestModel
{
    [RealtimeProperty(1, true, true)] private bool _playerID;
    [RealtimeProperty(2, true, true)] private int _dialingPlayer;
    [RealtimeProperty(3, true, true)] private int _talkingWithPlayer;
    [RealtimeProperty(4, true, true)] private int _terminatedPlayer;
    [RealtimeProperty(5, true, true)] private float _scaleFactor;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerTestModel : RealtimeModel {
    public bool playerID {
        get {
            return _playerIDProperty.value;
        }
        set {
            if (_playerIDProperty.value == value) return;
            _playerIDProperty.value = value;
            InvalidateReliableLength();
            FirePlayerIDDidChange(value);
        }
    }
    
    public int dialingPlayer {
        get {
            return _dialingPlayerProperty.value;
        }
        set {
            if (_dialingPlayerProperty.value == value) return;
            _dialingPlayerProperty.value = value;
            InvalidateReliableLength();
            FireDialingPlayerDidChange(value);
        }
    }
    
    public int talkingWithPlayer {
        get {
            return _talkingWithPlayerProperty.value;
        }
        set {
            if (_talkingWithPlayerProperty.value == value) return;
            _talkingWithPlayerProperty.value = value;
            InvalidateReliableLength();
            FireTalkingWithPlayerDidChange(value);
        }
    }
    
    public int terminatedPlayer {
        get {
            return _terminatedPlayerProperty.value;
        }
        set {
            if (_terminatedPlayerProperty.value == value) return;
            _terminatedPlayerProperty.value = value;
            InvalidateReliableLength();
            FireTerminatedPlayerDidChange(value);
        }
    }
    
    public float scaleFactor {
        get {
            return _scaleFactorProperty.value;
        }
        set {
            if (_scaleFactorProperty.value == value) return;
            _scaleFactorProperty.value = value;
            InvalidateReliableLength();
            FireScaleFactorDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PlayerTestModel model, T value);
    public event PropertyChangedHandler<bool> playerIDDidChange;
    public event PropertyChangedHandler<int> dialingPlayerDidChange;
    public event PropertyChangedHandler<int> talkingWithPlayerDidChange;
    public event PropertyChangedHandler<int> terminatedPlayerDidChange;
    public event PropertyChangedHandler<float> scaleFactorDidChange;
    
    public enum PropertyID : uint {
        PlayerID = 1,
        DialingPlayer = 2,
        TalkingWithPlayer = 3,
        TerminatedPlayer = 4,
        ScaleFactor = 5,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _playerIDProperty;
    
    private ReliableProperty<int> _dialingPlayerProperty;
    
    private ReliableProperty<int> _talkingWithPlayerProperty;
    
    private ReliableProperty<int> _terminatedPlayerProperty;
    
    private ReliableProperty<float> _scaleFactorProperty;
    
    #endregion
    
    public PlayerTestModel() : base(null) {
        _playerIDProperty = new ReliableProperty<bool>(1, _playerID);
        _dialingPlayerProperty = new ReliableProperty<int>(2, _dialingPlayer);
        _talkingWithPlayerProperty = new ReliableProperty<int>(3, _talkingWithPlayer);
        _terminatedPlayerProperty = new ReliableProperty<int>(4, _terminatedPlayer);
        _scaleFactorProperty = new ReliableProperty<float>(5, _scaleFactor);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _playerIDProperty.UnsubscribeCallback();
        _dialingPlayerProperty.UnsubscribeCallback();
        _talkingWithPlayerProperty.UnsubscribeCallback();
        _terminatedPlayerProperty.UnsubscribeCallback();
        _scaleFactorProperty.UnsubscribeCallback();
    }
    
    private void FirePlayerIDDidChange(bool value) {
        try {
            playerIDDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireDialingPlayerDidChange(int value) {
        try {
            dialingPlayerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTalkingWithPlayerDidChange(int value) {
        try {
            talkingWithPlayerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTerminatedPlayerDidChange(int value) {
        try {
            terminatedPlayerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireScaleFactorDidChange(float value) {
        try {
            scaleFactorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _playerIDProperty.WriteLength(context);
        length += _dialingPlayerProperty.WriteLength(context);
        length += _talkingWithPlayerProperty.WriteLength(context);
        length += _terminatedPlayerProperty.WriteLength(context);
        length += _scaleFactorProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _playerIDProperty.Write(stream, context);
        writes |= _dialingPlayerProperty.Write(stream, context);
        writes |= _talkingWithPlayerProperty.Write(stream, context);
        writes |= _terminatedPlayerProperty.Write(stream, context);
        writes |= _scaleFactorProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.PlayerID: {
                    changed = _playerIDProperty.Read(stream, context);
                    if (changed) FirePlayerIDDidChange(playerID);
                    break;
                }
                case (uint) PropertyID.DialingPlayer: {
                    changed = _dialingPlayerProperty.Read(stream, context);
                    if (changed) FireDialingPlayerDidChange(dialingPlayer);
                    break;
                }
                case (uint) PropertyID.TalkingWithPlayer: {
                    changed = _talkingWithPlayerProperty.Read(stream, context);
                    if (changed) FireTalkingWithPlayerDidChange(talkingWithPlayer);
                    break;
                }
                case (uint) PropertyID.TerminatedPlayer: {
                    changed = _terminatedPlayerProperty.Read(stream, context);
                    if (changed) FireTerminatedPlayerDidChange(terminatedPlayer);
                    break;
                }
                case (uint) PropertyID.ScaleFactor: {
                    changed = _scaleFactorProperty.Read(stream, context);
                    if (changed) FireScaleFactorDidChange(scaleFactor);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _playerID = playerID;
        _dialingPlayer = dialingPlayer;
        _talkingWithPlayer = talkingWithPlayer;
        _terminatedPlayer = terminatedPlayer;
        _scaleFactor = scaleFactor;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
