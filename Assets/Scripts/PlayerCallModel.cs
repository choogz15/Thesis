using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerCallModel
{
    [RealtimeProperty(1, true, true)] private bool _ringing;
    [RealtimeProperty(2, true, true)] private bool _calling;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerCallModel : RealtimeModel {
    public bool ringing {
        get {
            return _ringingProperty.value;
        }
        set {
            if (_ringingProperty.value == value) return;
            _ringingProperty.value = value;
            InvalidateReliableLength();
            FireRingingDidChange(value);
        }
    }
    
    public bool calling {
        get {
            return _callingProperty.value;
        }
        set {
            if (_callingProperty.value == value) return;
            _callingProperty.value = value;
            InvalidateReliableLength();
            FireCallingDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PlayerCallModel model, T value);
    public event PropertyChangedHandler<bool> ringingDidChange;
    public event PropertyChangedHandler<bool> callingDidChange;
    
    public enum PropertyID : uint {
        Ringing = 1,
        Calling = 2,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _ringingProperty;
    
    private ReliableProperty<bool> _callingProperty;
    
    #endregion
    
    public PlayerCallModel() : base(null) {
        _ringingProperty = new ReliableProperty<bool>(1, _ringing);
        _callingProperty = new ReliableProperty<bool>(2, _calling);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _ringingProperty.UnsubscribeCallback();
        _callingProperty.UnsubscribeCallback();
    }
    
    private void FireRingingDidChange(bool value) {
        try {
            ringingDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCallingDidChange(bool value) {
        try {
            callingDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _ringingProperty.WriteLength(context);
        length += _callingProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _ringingProperty.Write(stream, context);
        writes |= _callingProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Ringing: {
                    changed = _ringingProperty.Read(stream, context);
                    if (changed) FireRingingDidChange(ringing);
                    break;
                }
                case (uint) PropertyID.Calling: {
                    changed = _callingProperty.Read(stream, context);
                    if (changed) FireCallingDidChange(calling);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _ringing = ringing;
        _calling = calling;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
