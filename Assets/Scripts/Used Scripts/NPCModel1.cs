using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class NPCModel1
{
    [RealtimeProperty(1, true, true)] private bool _followConstraint;
    [RealtimeProperty(2, true, true)] private int _triggerAudio;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class NPCModel1 : RealtimeModel {
    public bool followConstraint {
        get {
            return _followConstraintProperty.value;
        }
        set {
            if (_followConstraintProperty.value == value) return;
            _followConstraintProperty.value = value;
            InvalidateReliableLength();
            FireFollowConstraintDidChange(value);
        }
    }
    
    public int triggerAudio {
        get {
            return _triggerAudioProperty.value;
        }
        set {
            if (_triggerAudioProperty.value == value) return;
            _triggerAudioProperty.value = value;
            InvalidateReliableLength();
            FireTriggerAudioDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(NPCModel1 model, T value);
    public event PropertyChangedHandler<bool> followConstraintDidChange;
    public event PropertyChangedHandler<int> triggerAudioDidChange;
    
    public enum PropertyID : uint {
        FollowConstraint = 1,
        TriggerAudio = 2,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _followConstraintProperty;
    
    private ReliableProperty<int> _triggerAudioProperty;
    
    #endregion
    
    public NPCModel1() : base(null) {
        _followConstraintProperty = new ReliableProperty<bool>(1, _followConstraint);
        _triggerAudioProperty = new ReliableProperty<int>(2, _triggerAudio);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _followConstraintProperty.UnsubscribeCallback();
        _triggerAudioProperty.UnsubscribeCallback();
    }
    
    private void FireFollowConstraintDidChange(bool value) {
        try {
            followConstraintDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTriggerAudioDidChange(int value) {
        try {
            triggerAudioDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _followConstraintProperty.WriteLength(context);
        length += _triggerAudioProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _followConstraintProperty.Write(stream, context);
        writes |= _triggerAudioProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.FollowConstraint: {
                    changed = _followConstraintProperty.Read(stream, context);
                    if (changed) FireFollowConstraintDidChange(followConstraint);
                    break;
                }
                case (uint) PropertyID.TriggerAudio: {
                    changed = _triggerAudioProperty.Read(stream, context);
                    if (changed) FireTriggerAudioDidChange(triggerAudio);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _followConstraint = followConstraint;
        _triggerAudio = triggerAudio;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
