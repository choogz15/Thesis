using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class TestModel
{
    [RealtimeProperty(1, true, true)] private int _handAnimation;
    [RealtimeProperty(2, false, true)] private float _triggerLeft;
    [RealtimeProperty(3, false, true)] private float _gripLeft;
    [RealtimeProperty(4, false, true)] private float _triggerRight;
    [RealtimeProperty(5, false, true)] private float _gripRight;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class TestModel : RealtimeModel {
    public float triggerLeft {
        get {
            return _triggerLeftProperty.value;
        }
        set {
            if (_triggerLeftProperty.value == value) return;
            _triggerLeftProperty.value = value;
            InvalidateUnreliableLength();
            FireTriggerLeftDidChange(value);
        }
    }
    
    public float gripLeft {
        get {
            return _gripLeftProperty.value;
        }
        set {
            if (_gripLeftProperty.value == value) return;
            _gripLeftProperty.value = value;
            InvalidateUnreliableLength();
            FireGripLeftDidChange(value);
        }
    }
    
    public float triggerRight {
        get {
            return _triggerRightProperty.value;
        }
        set {
            if (_triggerRightProperty.value == value) return;
            _triggerRightProperty.value = value;
            InvalidateUnreliableLength();
            FireTriggerRightDidChange(value);
        }
    }
    
    public float gripRight {
        get {
            return _gripRightProperty.value;
        }
        set {
            if (_gripRightProperty.value == value) return;
            _gripRightProperty.value = value;
            InvalidateUnreliableLength();
            FireGripRightDidChange(value);
        }
    }
    
    public int handAnimation {
        get {
            return _handAnimationProperty.value;
        }
        set {
            if (_handAnimationProperty.value == value) return;
            _handAnimationProperty.value = value;
            InvalidateReliableLength();
            FireHandAnimationDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(TestModel model, T value);
    public event PropertyChangedHandler<int> handAnimationDidChange;
    public event PropertyChangedHandler<float> triggerLeftDidChange;
    public event PropertyChangedHandler<float> gripLeftDidChange;
    public event PropertyChangedHandler<float> triggerRightDidChange;
    public event PropertyChangedHandler<float> gripRightDidChange;
    
    public enum PropertyID : uint {
        HandAnimation = 1,
        TriggerLeft = 2,
        GripLeft = 3,
        TriggerRight = 4,
        GripRight = 5,
    }
    
    #region Properties
    
    private ReliableProperty<int> _handAnimationProperty;
    
    private UnreliableProperty<float> _triggerLeftProperty;
    
    private UnreliableProperty<float> _gripLeftProperty;
    
    private UnreliableProperty<float> _triggerRightProperty;
    
    private UnreliableProperty<float> _gripRightProperty;
    
    #endregion
    
    public TestModel() : base(null) {
        _handAnimationProperty = new ReliableProperty<int>(1, _handAnimation);
        _triggerLeftProperty = new UnreliableProperty<float>(2, _triggerLeft);
        _gripLeftProperty = new UnreliableProperty<float>(3, _gripLeft);
        _triggerRightProperty = new UnreliableProperty<float>(4, _triggerRight);
        _gripRightProperty = new UnreliableProperty<float>(5, _gripRight);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _handAnimationProperty.UnsubscribeCallback();
    }
    
    private void FireHandAnimationDidChange(int value) {
        try {
            handAnimationDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTriggerLeftDidChange(float value) {
        try {
            triggerLeftDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGripLeftDidChange(float value) {
        try {
            gripLeftDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTriggerRightDidChange(float value) {
        try {
            triggerRightDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGripRightDidChange(float value) {
        try {
            gripRightDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _handAnimationProperty.WriteLength(context);
        length += _triggerLeftProperty.WriteLength(context);
        length += _gripLeftProperty.WriteLength(context);
        length += _triggerRightProperty.WriteLength(context);
        length += _gripRightProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _handAnimationProperty.Write(stream, context);
        writes |= _triggerLeftProperty.Write(stream, context);
        writes |= _gripLeftProperty.Write(stream, context);
        writes |= _triggerRightProperty.Write(stream, context);
        writes |= _gripRightProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.HandAnimation: {
                    changed = _handAnimationProperty.Read(stream, context);
                    if (changed) FireHandAnimationDidChange(handAnimation);
                    break;
                }
                case (uint) PropertyID.TriggerLeft: {
                    changed = _triggerLeftProperty.Read(stream, context);
                    if (changed) FireTriggerLeftDidChange(triggerLeft);
                    break;
                }
                case (uint) PropertyID.GripLeft: {
                    changed = _gripLeftProperty.Read(stream, context);
                    if (changed) FireGripLeftDidChange(gripLeft);
                    break;
                }
                case (uint) PropertyID.TriggerRight: {
                    changed = _triggerRightProperty.Read(stream, context);
                    if (changed) FireTriggerRightDidChange(triggerRight);
                    break;
                }
                case (uint) PropertyID.GripRight: {
                    changed = _gripRightProperty.Read(stream, context);
                    if (changed) FireGripRightDidChange(gripRight);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _handAnimation = handAnimation;
        _triggerLeft = triggerLeft;
        _gripLeft = gripLeft;
        _triggerRight = triggerRight;
        _gripRight = gripRight;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
