using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class VoiceChatModel
{
    [RealtimeProperty(1, true, true)] private int _pairID;
    [RealtimeProperty(2, true, true)] private int _status;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class VoiceChatModel : RealtimeModel {
    public int pairID {
        get {
            return _pairIDProperty.value;
        }
        set {
            if (_pairIDProperty.value == value) return;
            _pairIDProperty.value = value;
            InvalidateReliableLength();
            FirePairIDDidChange(value);
        }
    }
    
    public int status {
        get {
            return _statusProperty.value;
        }
        set {
            if (_statusProperty.value == value) return;
            _statusProperty.value = value;
            InvalidateReliableLength();
            FireStatusDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(VoiceChatModel model, T value);
    public event PropertyChangedHandler<int> pairIDDidChange;
    public event PropertyChangedHandler<int> statusDidChange;
    
    public enum PropertyID : uint {
        PairID = 1,
        Status = 2,
    }
    
    #region Properties
    
    private ReliableProperty<int> _pairIDProperty;
    
    private ReliableProperty<int> _statusProperty;
    
    #endregion
    
    public VoiceChatModel() : base(null) {
        _pairIDProperty = new ReliableProperty<int>(1, _pairID);
        _statusProperty = new ReliableProperty<int>(2, _status);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _pairIDProperty.UnsubscribeCallback();
        _statusProperty.UnsubscribeCallback();
    }
    
    private void FirePairIDDidChange(int value) {
        try {
            pairIDDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireStatusDidChange(int value) {
        try {
            statusDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _pairIDProperty.WriteLength(context);
        length += _statusProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _pairIDProperty.Write(stream, context);
        writes |= _statusProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.PairID: {
                    changed = _pairIDProperty.Read(stream, context);
                    if (changed) FirePairIDDidChange(pairID);
                    break;
                }
                case (uint) PropertyID.Status: {
                    changed = _statusProperty.Read(stream, context);
                    if (changed) FireStatusDidChange(status);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _pairID = pairID;
        _status = status;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
